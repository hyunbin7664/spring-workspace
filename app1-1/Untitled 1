	
	
	
	요청핸들러 메소드
	- HTTP 요청을 처리하는 메소드다.
	- 컨트롤러 클래스에 포함되어 있다.
	- 반환타입
		- JSP 기반 요청핸들러 메소드는 뷰이름을 반환한다.
		- REST API 기반 요청핸들러 메소드는 응답데이터를 반환한다.
	- 매개변수
		- 기본자료형 타입, String 타입
			요청 파라미터 값 추출
		- 자바빈즈
			요청 파라미터 값 추출
		- Model, ModelMap
			뷰에 데이터 전달
		- BindingResult, Errors
			유효성 검증 결과 처리
		- Principal, Authentication
			인증된 사용자 정보 조회(Spring Security)
	- 주요 어노테이션
		- 요청 URL과 요청핸들러 메소드 매핑
			- @RequestMapping
				- 클래스와 메소드에 선언
				- 모든 요청방식에 매핑된다.
				- 주요 속성
					path		요청 URL 지정
					method		요청 방식 지정
					params		특정 요청파라미터 조건 지정
					headers		특정 요청헤더 조건 지정
					consumes	요청 메시지의 컨텐츠 타입을 지정
					produces	응답 메시지의 컨텐츠 타입을 지정
			- @GetMapping
				- 메소드에 선언
				- GET 방식에 요청에 매핑된다.
			- @PostMapping
				- 메소드에 선언
				- PUT 방식에 요청에 매핑된다.
			- @PutMapping
				- 메소드에 선언
				- PUT 방식에 요청에 매핑된다.
			- @DeleteMapping
				- 메소드에 선언
				- DELETE 방식에 요청에 매핑된다.
			* 뷰 템플릿 기반 웹 애플리케이션에서는 
				@RequestMapping, @GetMapping, @PostMapping 만 주로 사용
			* REST API 기반 웹 애플리케이션에서는
				@PutMapping, @DeleteMapping도 같이 사용
		- 사용예시	
			// 모든 요청방식의 /home 에 매핑된다.
			@RequestMapping("/home")
			public String home() {
			
			}
			// 모든 요청방식의 /home 에 매핑된다.
			@RequestMapping(path = "/home")
			public String home() {
			
			}
			// GET 요청방식의 /home 에 매핑된다.
			@RequestMapping(path = "/home", method = RequestMethod.GET)
			public String home() {
			
			}
			// GET 요청방식의 /home 에 매핑된다.
			@GetMapping("/home")
			public String home() {
			
			}
		- 사용예시
			@Controller
			public class PostController {
			
				@GetMapping("/posts/list")
				public String abc() {...}
				
				@GetMapping("/posts/detail")
				public String def() {...}
				
				@PutMapping("/posts/register")
				public String ghi() {...}
				
			
			}
			@Controller
			@RequestMapping("/posts")
			public class PostController {
			
				@GetMapping("/list")
				public String abc() {...}
				
				@GetMapping("/detail")
				public String def() {...}
				
				@PutMapping("/register")
				public String ghi() {...}
				
			}
		- 요청 파라미터 처리 관련 어노테이션
			- @RequestParam
				- 요청파라미터와 요청핸들러 메소드의 매개변수를 매핑한다.
				- 주요 속성
					name
						- 요청파라미터의 이름을 지정한다.
					required
						- 필수 요청파라미터 인지 여부를 지정한다.
						- 지정하지 않으면 기본값은 true다.
					defaultValues
						- 지정된 요청파라미터값이 존재하지 않을 때 기본값을 지정한다.
						- 기본값을 String 형태로 적는다.
				- 사용 예시
					- 요청파라미터값이 반드시 존재하고, 요청파라미터의 이름과 매개변수 이름이 같을 때
						// detail?no=10
						@GetMapping("/detail")
						String detail(int no) {
							...
						}
					- 요청파라미터값이 반드시 존재하고, 요청파라미터의 이름과 매개변수 이름이 다를 때
						// detail?no=10
						@GetMapping("/detail")
						String detail(@RequestParam("no") int bookNo) {
							...
						}
					- 요청파라미터값이 존재하지 않을 수도 있다. 존재하지 않으면 기본값은 1이다.
						//list
						//list?page=2
						@GetMapping("/list")
						String list(@RequestParam(name = "page", required = false, defaultValue = "1") int page) {
							...
						}
						
						// search
						// search?keyword=자바
						@GetMapping("/search")
						String list(@RequestParam(name = "keyword", required = false) String keyword) {
							...
						}
					- 같은 이름의 요청파라미터 값이 여러개 전달될 때
						// search?tag=java&tag=spring&tag=msa
						@GetMapping("/search")
						String list(@RequestParam("tag") String[] tags) {
							...
						}
						// search?tag=java&tag=spring&tag=msa
						@GetMapping("/search")
						String list(@RequestParam("tag") List<String> tags) {
							...
						}
	
	
	
	
	
	
	
	
	
			