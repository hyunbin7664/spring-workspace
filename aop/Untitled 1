	AOP의 주요 용어
	Target
		- 핵심 기능이 정의된 객체
		- 공통 기능의 적용대상 객체
	JoinPoint
		- 공통기능 적용되는 시점
			- 컴파일 시점
			- 클래스 로딩 시점
			- 객체 생성 시점
			- 메소드 실행 시점
			- 프로퍼티 값 변경 시점
		- Spring AOP는 "메소드 실행 시점 조인포인트"만 지원한다.
		- JoinPoint를 "핵심기능이 정의된 메소드"라고 생각해도 상관없다.
	Advice
		- 핵심 기능에 적용할 공통기능 코드블록
		- Advice는 What(공통기능) + When(공통기능 실행 시점)을 포함한다.
		- 실행시점
			before
			after, after-returning, after-throwing
			around
	Pointcut(Where)
		- 공통기능 적용 규칙
		- 여러 Joinpoint 중에 특정 Joinpoint에 공통기능에 적용되게 한다.
	Aspect
		- 공통기능을 모듈화한 것
		- 공통기능을 AOP로 적용하기 위해서는 Aspect로 모듈화해야 한다.
		- Aspect = Advice(what, when) + Pointcut(where)
	Proxy
		- Spring AOP가 핵심기능 실행시 공통기능을 같이 실행하기 위해서 동적으로 생성하는 객체다.
	Weaving 
		- Target의 핵심기능 실행시 Advice의 공통기능이 같이 실행되도록
		  Target에 Advice를 적용하는 것
		  혹은 Target에 Advice를 적용해서 Proxy를 생성하는 것
	
	
	
	-----------------
	Advice 정의
	- 실행 시점
		@Before
			- 대상 메소드 실행 전 공통기능이 실행됨
		@After
			- 대상 메소드 실행 후(정상실행/오류발생 상관없이) 공통기능이 실행됨
		@AfterReturing
			- 대상 메소드가 오류 없이 정상 실행 후 공통기능이 실행됨
			- 대상 메소드의 반환값에 접근할 수 있다.
		@AfterThrowing
			- 대상 메소드 실행 시 오류가 발생했을 때 공통기능이 실행됨
			- 대상 메소드에서 발생한 오류에 접근할 수 있다.
		@Around
			- 대상 메소드의 실행 전/후에 공통기능이 실행됨
			- 공통 기능 내부에서 대상 메소드를 실행시킨다.
			- 대상 메소드의 매개변수/반환값을 접근(조회/변경)할 수 있다.
			- 대상 메소드의 실행 여부도 결정할 수 있다.
			- 나머지 다른 공통기능을 전부 흉내낼 수 있다.
	- API
		JoinPoint
		ProceedingJoinPoint
			- Advice가 적용되는 대상에 대한 정보를 제공하는 객체다.
			- 공통기능을 정의할 때 매개변수를 선언하면 전달받을 수 있다.
			- ProceedingJoinPoint는 @Around 전용이다.
			- @Around는 ProceedingJoinPoint를 무조건 매개변수로 전달 받아야 한다.
			- ProceedingJoinPoint는 공통기능 안에서 대상 메소드를 실행시킨다.
			
	포인트 컷 표현식
	- 표현식
		execution()		- 메소드 실행 지점을 지정한다.
						- 가장 많이 사용되는 표현식
						- execution([접근제한자][반환타입][패키지.클래스명].[메소드명]([파라미터]))
						- 예시
							execution(* com.example.service.*Service.*(..))
								service 패키지의 모든 Service 클래스의 모든 메소드
							execution(* com.example..*.*(..))
								com.example 및 그 하위 패키지의 모든 클래스의 모든 메소드
		within()		- 클래스 범위를 지정한다.
						- 예시
							within(com.example.service.*)
								com.example.service 패키지의 모든 클래스
							within(com.example..*)
								com.example 및 그 하위 패키지의 모든 클래스
	- 와일드 카드
		*	1개의 임의의 단어를 나타낸다.
			패키지명, 클래스명, 메소드명, 리턴타입에 주로 사용된다.
		.. 	0개 이상의 임의의 단어를 나타낸다.
			패키지명, 메소드의 파라미터에 주로 사용
		
		within(com.example.service.*)
			- com.example.service 패키지의 모든 클래스
			- *는 임의의 클래스명을 나타낸다.
		within(com.example..*)
			- com.example 패키지 및 그 하위 패키지의 모든 클래스
			- ..은 0개 이상의 패키지 이름을 나타낸다.
			  즉, com.example
			  	  com.example.service
			  	  com.example.dao
			  	  com.example.web.controller
			  	  com.example.web.advice
		execution(public * com.example.service.*Service.*get(..))
			- * : 반환타입 자리다. 이므이의 반환타입을 나타낸다.
			- *Service : Service로 끝나는 모든 클래스가 대상이다.
			- get*(..) : get*는 메소드 이름이 get으로 시작하는 것이 대상이다.
						 (..)는 매개변수는 0개 이상의 임의의 매개변수가 대상이다.
						 따라서, get*(..)는 get으로 시작하는 모든 메소드를 나타낸다.
						 
		execution(public * com.example.service.*Service.*(..))
		within(com.example.service.*Service)
			- 위의 2가지 표현식은 동일한 적용대상을 나타낸다.
	
	